var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var common_1 = require('angular2/common');
var start_1 = require('./start');
var dock_1 = require('./dock');
var TaskbarCmp = (function () {
    function TaskbarCmp() {
        var _this = this;
        this._id = 'taskbar';
        this.time = new Date;
        setTimeout(function () {
            _this.time = new Date;
        }, 1000);
    }
    TaskbarCmp.prototype.work = function () {
        alert('敬请期待');
    };
    TaskbarCmp.prototype.clickTime = function () {
        alert('敬请期待');
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], TaskbarCmp.prototype, "docks", void 0);
    TaskbarCmp = __decorate([
        core_1.Component({
            selector: 'taskbar',
            template: "\n        <div id=\"{{_id}}\" class=\"bottomBar\"> \n            <div class=\"backgroundDiv\"> \n                <start></start> \n                <div class=\"task-work\" (click)=\"work()\"><div></div></div> \n                <dock [docks]=\"docks\"></dock> \n                <div class=\"task-clock\" (click)=\"clickTime()\"> \n                    <div id=\"time\">{{time | date:'HH'}}:{{time | date:'mm'}}</div> \n                    <div id=\"date\">{{time | date:'yyyy'}}-{{time | date:'MM'}}-{{time | date:'dd'}}</div> \n                </div> \n            </div> \n        </div> \n    ",
            styles: ["\n\n      .task-start .start-button{\n          background-image:url(\"../../resource/images/start.png\");\n          background-size: contain;\n          float: left;\n          width: 50px;\n          height: 40px;\n      }\n\n      .task-start .start-button:hover{\n          transition: 0.5s linear;\n          background-image:url(\"../../resource/images/start-hover.png\");\n      }\n\n      .task-start .task-search{\n          float: left;\n          margin-left: 5px;\n      /*    background: rgba(48,74,109,0.9);*/\n      }\n\n      .task-start .task-search input{\n          height: 28px;\n          width: 300px;\n          background: rgba(82,101,127,1);\n          border: 0px;\n          font-size: 14px;\n          padding-left: 5px;\n          margin: 5px 12px;\n      } \n\n      .task-start .task-search input:focus{\n          background:none;\n          background: #fff;\n          outline:none;\n      }\n\n      .task-work{\n          float: left;\n          width: 50px;\n          height: 50px;\n      }\n\n      .task-work div{\n          width: 50px;\n          height: 50px;\n          background-image:url(\"../../resource/images/work.png\");\n      }\n\n      .task-work:hover{\n          transition: 0.2s linear;\n          background: none repeat scroll 0 0 rgba(255, 255, 255, 0.1);\n      }\n\n      .task-clock{\n          float:right;\n          color:#fff;\n          width:75px;\n          text-align: center;\n          font-size: 13px;\n          margin-right: 5px;\n      }\n\n      .task-clock div{\n          margin-top: 3px;\n      }\n    "],
            directives: [common_1.NgStyle, start_1.StartCmp, dock_1.DockCmp]
        }), 
        __metadata('design:paramtypes', [])
    ], TaskbarCmp);
    return TaskbarCmp;
})();
exports.TaskbarCmp = TaskbarCmp;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlc2t0b3AvdGFza2Jhci90YXNrYmFyLnRzIl0sIm5hbWVzIjpbIlRhc2tiYXJDbXAiLCJUYXNrYmFyQ21wLmNvbnN0cnVjdG9yIiwiVGFza2JhckNtcC53b3JrIiwiVGFza2JhckNtcC5jbGlja1RpbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFCQUErQixlQUFlLENBQUMsQ0FBQTtBQUMvQyx1QkFBc0IsaUJBQWlCLENBQUMsQ0FBQTtBQUV4QyxzQkFBeUIsU0FBUyxDQUFDLENBQUE7QUFDbkMscUJBQXdCLFFBQVEsQ0FBQyxDQUFBO0FBQ2pDO0lBK0ZJQTtRQS9GSkMsaUJBb0dDQTtRQWRHQSxRQUFHQSxHQUFHQSxTQUFTQSxDQUFDQTtRQUVoQkEsU0FBSUEsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQUE7UUFRWEEsVUFBVUEsQ0FBQ0E7WUFDUEEsS0FBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQUE7UUFDeEJBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO0lBQ2JBLENBQUNBO0lBVkRELHlCQUFJQSxHQUFKQTtRQUNJRSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFBQTtJQUNqQkEsQ0FBQ0E7SUFDREYsOEJBQVNBLEdBQVRBO1FBQ0lHLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUFBO0lBQ2pCQSxDQUFDQTtJQVBESDtRQUFDQSxZQUFLQSxFQUFFQTs7T0FBQ0EsNkJBQUtBLFVBQUNBO0lBdkZuQkE7UUFBQ0EsZ0JBQVNBLENBQUNBO1lBQ1BBLFFBQVFBLEVBQUVBLFNBQVNBO1lBQ25CQSxRQUFRQSxFQUFFQSxvbEJBWVRBO1lBQ0RBLE1BQU1BLEVBQUVBLENBQUNBLGtqREFrRVJBLENBQUNBO1lBQ0ZBLFVBQVVBLEVBQUVBLENBQUNBLGdCQUFPQSxFQUFFQSxnQkFBUUEsRUFBRUEsY0FBT0EsQ0FBQ0E7U0FDM0NBLENBQUNBOzttQkFpQkRBO0lBQURBLGlCQUFDQTtBQUFEQSxDQXBHQSxBQW9HQ0EsSUFBQTtBQWZZLGtCQUFVLGFBZXRCLENBQUEiLCJmaWxlIjoiZGVza3RvcC90YXNrYmFyL3Rhc2tiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXR9IGZyb20gJ2FuZ3VsYXIyL2NvcmUnO1xuaW1wb3J0IHtOZ1N0eWxlfSBmcm9tICdhbmd1bGFyMi9jb21tb24nO1xuXG5pbXBvcnQgeyBTdGFydENtcCB9IGZyb20gJy4vc3RhcnQnO1xuaW1wb3J0IHsgRG9ja0NtcCB9IGZyb20gJy4vZG9jayc7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3Rhc2tiYXInLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgaWQ9XCJ7e19pZH19XCIgY2xhc3M9XCJib3R0b21CYXJcIj4gXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmFja2dyb3VuZERpdlwiPiBcbiAgICAgICAgICAgICAgICA8c3RhcnQ+PC9zdGFydD4gXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2std29ya1wiIChjbGljayk9XCJ3b3JrKClcIj48ZGl2PjwvZGl2PjwvZGl2PiBcbiAgICAgICAgICAgICAgICA8ZG9jayBbZG9ja3NdPVwiZG9ja3NcIj48L2RvY2s+IFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLWNsb2NrXCIgKGNsaWNrKT1cImNsaWNrVGltZSgpXCI+IFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidGltZVwiPnt7dGltZSB8IGRhdGU6J0hIJ319Ont7dGltZSB8IGRhdGU6J21tJ319PC9kaXY+IFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZGF0ZVwiPnt7dGltZSB8IGRhdGU6J3l5eXknfX0te3t0aW1lIHwgZGF0ZTonTU0nfX0te3t0aW1lIHwgZGF0ZTonZGQnfX08L2Rpdj4gXG4gICAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICA8L2Rpdj4gXG4gICAgYCwgICBcbiAgICBzdHlsZXM6IFtgXG5cbiAgICAgIC50YXNrLXN0YXJ0IC5zdGFydC1idXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTp1cmwoXCIuLi8uLi9yZXNvdXJjZS9pbWFnZXMvc3RhcnQucG5nXCIpO1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcbiAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgICB3aWR0aDogNTBweDtcbiAgICAgICAgICBoZWlnaHQ6IDQwcHg7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLXN0YXJ0IC5zdGFydC1idXR0b246aG92ZXJ7XG4gICAgICAgICAgdHJhbnNpdGlvbjogMC41cyBsaW5lYXI7XG4gICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTp1cmwoXCIuLi8uLi9yZXNvdXJjZS9pbWFnZXMvc3RhcnQtaG92ZXIucG5nXCIpO1xuICAgICAgfVxuXG4gICAgICAudGFzay1zdGFydCAudGFzay1zZWFyY2h7XG4gICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICAgIC8qICAgIGJhY2tncm91bmQ6IHJnYmEoNDgsNzQsMTA5LDAuOSk7Ki9cbiAgICAgIH1cblxuICAgICAgLnRhc2stc3RhcnQgLnRhc2stc2VhcmNoIGlucHV0e1xuICAgICAgICAgIGhlaWdodDogMjhweDtcbiAgICAgICAgICB3aWR0aDogMzAwcHg7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSg4MiwxMDEsMTI3LDEpO1xuICAgICAgICAgIGJvcmRlcjogMHB4O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgICAgICAgICBtYXJnaW46IDVweCAxMnB4O1xuICAgICAgfSBcblxuICAgICAgLnRhc2stc3RhcnQgLnRhc2stc2VhcmNoIGlucHV0OmZvY3Vze1xuICAgICAgICAgIGJhY2tncm91bmQ6bm9uZTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICAgIG91dGxpbmU6bm9uZTtcbiAgICAgIH1cblxuICAgICAgLnRhc2std29ya3tcbiAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgICB3aWR0aDogNTBweDtcbiAgICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLXdvcmsgZGl2e1xuICAgICAgICAgIHdpZHRoOiA1MHB4O1xuICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOnVybChcIi4uLy4uL3Jlc291cmNlL2ltYWdlcy93b3JrLnBuZ1wiKTtcbiAgICAgIH1cblxuICAgICAgLnRhc2std29yazpob3ZlcntcbiAgICAgICAgICB0cmFuc2l0aW9uOiAwLjJzIGxpbmVhcjtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lIHJlcGVhdCBzY3JvbGwgMCAwIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbiAgICAgIH1cblxuICAgICAgLnRhc2stY2xvY2t7XG4gICAgICAgICAgZmxvYXQ6cmlnaHQ7XG4gICAgICAgICAgY29sb3I6I2ZmZjtcbiAgICAgICAgICB3aWR0aDo3NXB4O1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBmb250LXNpemU6IDEzcHg7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWNsb2NrIGRpdntcbiAgICAgICAgICBtYXJnaW4tdG9wOiAzcHg7XG4gICAgICB9XG4gICAgYF0sXG4gICAgZGlyZWN0aXZlczogW05nU3R5bGUsIFN0YXJ0Q21wLCBEb2NrQ21wXVxufSlcblxuZXhwb3J0IGNsYXNzIFRhc2tiYXJDbXAge1xuICAgIF9pZCA9ICd0YXNrYmFyJztcbiAgICBASW5wdXQoKSBkb2NrcztcbiAgICB0aW1lID0gbmV3IERhdGVcbiAgICB3b3JrKCl7XG4gICAgICAgIGFsZXJ0KCfmlazor7fmnJ/lvoUnKVxuICAgIH1cbiAgICBjbGlja1RpbWUoKXtcbiAgICAgICAgYWxlcnQoJ+aVrOivt+acn+W+hScpXG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgICAgICB0aGlzLnRpbWUgPSBuZXcgRGF0ZVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
var util_1 = require('../tools/util');
var dock_1 = require('../../desktop/taskbar/dock');
var zindex = 100;
exports.windowTemplate = "\n    <div id=\"{{config && config._id}}\" (mousedown)=\"focus(config && config._id)\" [ngStyle]=\"{'width': width+'px', 'height': height+'px', 'z-index': zindex}\"  class=\"panel desktop-window\"  > \n        <div class=\"header\" style=\"position: absolute;\"> \n            <div class=\"icon\"></div> \n            <div class=\"title\">{{config.title}}</div> \n            <div class=\"panel-title-buttons\"> \n                <div class=\"icon-min\" (click)=\"min()\"> </div> \n                <div class=\"icon-max\" (click)=\"max()\"> </div> \n                <div class=\"icon-close\" (click)=\"destroy()\"> </div> \n            </div> \n        </div>\n        \n        {{__body__}}\n        \n        <div class=\"design-resize-left design-resize\"></div>\n        <div class=\"design-resize-right design-resize\"></div>\n        <div class=\"design-resize-bottom design-resize\"></div>\n        <div class=\"design-resize-right-bottom design-resize\"></div>\n        <div class=\"design-resize-left-bottom design-resize\"></div>\n    </div> \n";
var WindowCmp = (function () {
    function WindowCmp() {
        var _this = this;
        this.zindex = 100;
        this.width = 900;
        this.height = 300;
        setTimeout(function () {
            _this.focus(1);
        });
    }
    WindowCmp.prototype.setDialog = function () {
        util_1.dialog({
            top: 50 + (Math.random() * 100),
            left: 100 + (Math.random() * 100),
            taskBarHeight: 42,
            element: $(this.element).find('.panel')[0],
            eventEl: $(this.element).find('.header')[0],
            onMove: function () {
            },
            onMouseUp: function () {
            },
            onResize: function () {
            }
        });
    };
    WindowCmp.prototype.setTitle = function (title) {
        $(this.element).find('.title').html(title);
    };
    WindowCmp.prototype.focus = function (id) {
        $('.panel').removeClass('focus');
        $(this.element).find('.panel').css('z-index', zindex++);
        $(this.element).find('.panel').addClass('focus');
    };
    WindowCmp.prototype.destroy = function () {
        var _this = this;
        this.config.componentList.forEach(function (item, index) {
            if (item._id === _this.config._id)
                _this.config.componentList.splice(index, 1);
        });
        if (this.config.componentList.length)
            return;
        dock_1.dockAppList.forEach(function (item, index) {
            if (item._id === _this.config.type)
                dock_1.dockAppList.splice(index, 1);
        });
    };
    WindowCmp.prototype.min = function () {
        $(this.element).find('.panel').hide();
    };
    WindowCmp.prototype.max = function () {
    };
    return WindowCmp;
})();
exports.WindowCmp = WindowCmp;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlc2t0b3AvcGFuZWwvd2luZG93LnRzIl0sIm5hbWVzIjpbIldpbmRvd0NtcCIsIldpbmRvd0NtcC5jb25zdHJ1Y3RvciIsIldpbmRvd0NtcC5zZXREaWFsb2ciLCJXaW5kb3dDbXAuc2V0VGl0bGUiLCJXaW5kb3dDbXAuZm9jdXMiLCJXaW5kb3dDbXAuZGVzdHJveSIsIldpbmRvd0NtcC5taW4iLCJXaW5kb3dDbXAubWF4Il0sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUIsZUFBZSxDQUFDLENBQUE7QUFDckMscUJBQTRCLDRCQUE0QixDQUFDLENBQUE7QUFJekQsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFBO0FBQ0wsc0JBQWMsR0FBRyxnaUNBb0IzQixDQUFBO0FBRUQ7SUFNSUE7UUFOSkMsaUJBNkRDQTtRQTFER0EsV0FBTUEsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDaEJBLFVBQUtBLEdBQUdBLEdBQUdBLENBQUFBO1FBQ1hBLFdBQU1BLEdBQUdBLEdBQUdBLENBQUFBO1FBRUxBLFVBQVVBLENBQUNBO1lBQ1BBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUFBO1FBQ2pCQSxDQUFDQSxDQUFDQSxDQUFBQTtJQUNOQSxDQUFDQTtJQUNERCw2QkFBU0EsR0FBVEE7UUFFSUUsYUFBTUEsQ0FBQ0E7WUFDSEEsR0FBR0EsRUFBRUEsRUFBRUEsR0FBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDNUJBLElBQUlBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUNBLEdBQUdBLENBQUNBO1lBQy9CQSxhQUFhQSxFQUFFQSxFQUFFQTtZQUNqQkEsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUNBLE9BQU9BLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzNDQSxNQUFNQSxFQUFFQTtZQUVqQkEsQ0FBQ0E7WUFDREEsU0FBU0EsRUFBRUE7WUFFWEEsQ0FBQ0E7WUFDUUEsUUFBUUEsRUFBRUE7WUFFVkEsQ0FBQ0E7U0FDSkEsQ0FBQ0EsQ0FBQUE7SUFDTkEsQ0FBQ0E7SUFFREYsNEJBQVFBLEdBQVJBLFVBQVNBLEtBQUtBO1FBQ1ZHLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUFBO0lBQzlDQSxDQUFDQTtJQUVESCx5QkFBS0EsR0FBTEEsVUFBTUEsRUFBRUE7UUFDSkksQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFNBQVNBLEVBQUVBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUNyREEsQ0FBQ0E7SUFFREosMkJBQU9BLEdBQVBBO1FBQUFLLGlCQWFDQTtRQVpHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxJQUFJQSxFQUFFQSxLQUFLQTtZQUMxQ0EsRUFBRUEsQ0FBQUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsS0FBS0EsS0FBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBSUEsQ0FBQ0E7Z0JBQzlCQSxLQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUNsREEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFFRkEsRUFBRUEsQ0FBQUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBT0EsQ0FBQ0E7WUFDbENBLE1BQU1BLENBQUFBO1FBRVZBLGtCQUFXQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFDQSxJQUFJQSxFQUFFQSxLQUFLQTtZQUM1QkEsRUFBRUEsQ0FBQUEsQ0FBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsS0FBS0EsS0FBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBS0EsQ0FBQ0E7Z0JBQy9CQSxrQkFBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFDcENBLENBQUNBLENBQUNBLENBQUFBO0lBQ05BLENBQUNBO0lBQ0RMLHVCQUFHQSxHQUFIQTtRQUNJTSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFBQTtJQUN6Q0EsQ0FBQ0E7SUFDRE4sdUJBQUdBLEdBQUhBO0lBRUFPLENBQUNBO0lBQ0xQLGdCQUFDQTtBQUFEQSxDQTdEQSxBQTZEQ0EsSUFBQTtBQTdEWSxpQkFBUyxZQTZEckIsQ0FBQSIsImZpbGUiOiJkZXNrdG9wL3BhbmVsL3dpbmRvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbmplY3QsIEVsZW1lbnRSZWZ9IGZyb20gJ2FuZ3VsYXIyL2NvcmUnO1xuaW1wb3J0IHtOZ1N0eWxlfSBmcm9tICdhbmd1bGFyMi9jb21tb24nO1xuaW1wb3J0IHtkaWFsb2d9IGZyb20gJy4uL3Rvb2xzL3V0aWwnO1xuaW1wb3J0IHsgZG9ja0FwcExpc3QgfSBmcm9tICcuLi8uLi9kZXNrdG9wL3Rhc2tiYXIvZG9jayc7XG5cbmRlY2xhcmUgdmFyICRcblxudmFyIHppbmRleCA9IDEwMFxuZXhwb3J0IHZhciB3aW5kb3dUZW1wbGF0ZSA9IGBcbiAgICA8ZGl2IGlkPVwie3tjb25maWcgJiYgY29uZmlnLl9pZH19XCIgKG1vdXNlZG93bik9XCJmb2N1cyhjb25maWcgJiYgY29uZmlnLl9pZClcIiBbbmdTdHlsZV09XCJ7J3dpZHRoJzogd2lkdGgrJ3B4JywgJ2hlaWdodCc6IGhlaWdodCsncHgnLCAnei1pbmRleCc6IHppbmRleH1cIiAgY2xhc3M9XCJwYW5lbCBkZXNrdG9wLXdpbmRvd1wiICA+IFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7XCI+IFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIj48L2Rpdj4gXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj57e2NvbmZpZy50aXRsZX19PC9kaXY+IFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhbmVsLXRpdGxlLWJ1dHRvbnNcIj4gXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb24tbWluXCIgKGNsaWNrKT1cIm1pbigpXCI+IDwvZGl2PiBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbi1tYXhcIiAoY2xpY2spPVwibWF4KClcIj4gPC9kaXY+IFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLWNsb3NlXCIgKGNsaWNrKT1cImRlc3Ryb3koKVwiPiA8L2Rpdj4gXG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAge3tfX2JvZHlfX319XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzaWduLXJlc2l6ZS1sZWZ0IGRlc2lnbi1yZXNpemVcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRlc2lnbi1yZXNpemUtcmlnaHQgZGVzaWduLXJlc2l6ZVwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzaWduLXJlc2l6ZS1ib3R0b20gZGVzaWduLXJlc2l6ZVwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzaWduLXJlc2l6ZS1yaWdodC1ib3R0b20gZGVzaWduLXJlc2l6ZVwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzaWduLXJlc2l6ZS1sZWZ0LWJvdHRvbSBkZXNpZ24tcmVzaXplXCI+PC9kaXY+XG4gICAgPC9kaXY+IFxuYFxuXG5leHBvcnQgY2xhc3MgV2luZG93Q21we1xuICAgIGNvbmZpZzphbnk7XG4gICAgZWxlbWVudDogYW55O1xuICAgIHppbmRleCA9IDEwMDtcblx0d2lkdGggPSA5MDBcblx0aGVpZ2h0ID0gMzAwXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgdGhpcy5mb2N1cygxKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBzZXREaWFsb2coKVxuICAgIHtcbiAgICAgICAgZGlhbG9nKHtcbiAgICAgICAgICAgIHRvcDogNTArIChNYXRoLnJhbmRvbSgpKjEwMCksXG4gICAgICAgICAgICBsZWZ0OiAxMDAgKyAoTWF0aC5yYW5kb20oKSoxMDApLFxuICAgICAgICAgICAgdGFza0JhckhlaWdodDogNDIsXG4gICAgICAgICAgICBlbGVtZW50OiAkKHRoaXMuZWxlbWVudCkuZmluZCgnLnBhbmVsJylbMF0sXG4gICAgICAgICAgICBldmVudEVsOiAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmhlYWRlcicpWzBdLFxuICAgICAgICAgICAgb25Nb3ZlOiAoKSA9PiB7XG5cdFx0XHRcdFxuXHRcdFx0fSxcblx0XHRcdG9uTW91c2VVcDogKCkgPT4ge1xuXHRcdFx0XHRcblx0XHRcdH0sXG4gICAgICAgICAgICBvblJlc2l6ZTogKCkgPT4ge1xuXHRcdFx0XHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgc2V0VGl0bGUodGl0bGUpe1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZCgnLnRpdGxlJykuaHRtbCh0aXRsZSlcbiAgICB9XG4gICAgXG4gICAgZm9jdXMoaWQpe1xuICAgICAgICAkKCcucGFuZWwnKS5yZW1vdmVDbGFzcygnZm9jdXMnKTtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy5wYW5lbCcpLmNzcygnei1pbmRleCcsIHppbmRleCsrKTtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy5wYW5lbCcpLmFkZENsYXNzKCdmb2N1cycpO1xuICAgIH1cbiAgICBcbiAgICBkZXN0cm95KCl7XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbXBvbmVudExpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiggaXRlbS5faWQgPT09IHRoaXMuY29uZmlnLl9pZCApXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuY29tcG9uZW50TGlzdC5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBpZiggdGhpcy5jb25maWcuY29tcG9uZW50TGlzdC5sZW5ndGggKVxuICAgICAgICAgICAgcmV0dXJuIFxuICAgICAgICBcbiAgICAgICAgZG9ja0FwcExpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiggaXRlbS5faWQgPT09IHRoaXMuY29uZmlnLnR5cGUgKVxuICAgICAgICAgICAgICAgIGRvY2tBcHBMaXN0LnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgbWluKCl7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKCcucGFuZWwnKS5oaWRlKClcbiAgICB9XG4gICAgbWF4KCl7XG4gICAgICAgIFxuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==